{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useForm = void 0;\n\nvar react_1 = require(\"react\");\n\nvar handler_1 = require(\"./lib/handler\");\n\nfunction useForm(props) {\n  var id = props.id,\n      _a = props.debug,\n      debug = _a === void 0 ? true : _a,\n      extraData = props.extraData;\n\n  var _b = react_1.useState(false),\n      submitted = _b[0],\n      setSubmitted = _b[1];\n\n  var _c = react_1.useState(false),\n      submitting = _c[0],\n      setSubmitting = _c[1];\n\n  var _d = react_1.useState(undefined),\n      error = _d[0],\n      setError = _d[1];\n\n  var _e = react_1.useState(),\n      response = _e[0],\n      setResponse = _e[1];\n\n  react_1.useEffect(function () {\n    if (error && debug) {\n      handler_1.errorHandler(error);\n    }\n  }, [debug, error]);\n\n  function submit(event) {\n    event.preventDefault();\n\n    if (!id) {\n      handler_1.noIdHandler();\n      return;\n    }\n\n    var data = new FormData(event.currentTarget);\n\n    if (typeof extraData === 'object') {\n      for (var item in extraData) {\n        if (extraData.hasOwnProperty(item)) {\n          data.append(item, extraData[item]);\n        }\n      }\n    }\n\n    setSubmitted(false);\n    setError(undefined);\n    setResponse(undefined);\n    setSubmitting(true);\n    fetch(\"https://formcarry.com/s/\" + id, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json'\n      },\n      body: data\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.code === 200) {\n        setSubmitted(true);\n        setResponse(res);\n      } else {\n        setError(res);\n      }\n    }).catch(function (err) {\n      setError(err);\n    }).finally(function () {\n      setSubmitting(false);\n    });\n  }\n\n  return {\n    state: {\n      error: error,\n      response: response,\n      submitting: submitting,\n      submitted: submitted\n    },\n    submit: submit\n  };\n}\n\nexports.useForm = useForm;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AAEA,SAASA,OAAT,CAAiBC,KAAjB,EAA6B;EACpB,MAAE,GAA8BA,KAAK,GAArC;EAAA,IAAIC,KAA4BD,KAAK,MAArC;EAAA,IAAIE,KAAK,mBAAG,IAAH,GAAOD,EAAhB;EAAA,IAAkBE,SAAS,GAAKH,KAAK,UAArC;;EACF,SAA4BI,iBAAkB,KAAlB,CAA5B;EAAA,IAACC,SAAS,QAAV;EAAA,IAAYC,YAAY,QAAxB;;EACA,SAA8BF,iBAAkB,KAAlB,CAA9B;EAAA,IAACG,UAAU,QAAX;EAAA,IAAaC,aAAa,QAA1B;;EACA,SAAoBJ,iBAASK,SAAT,CAApB;EAAA,IAACC,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EACA,SAA0BP,kBAA1B;EAAA,IAACQ,QAAQ,QAAT;EAAA,IAAWC,WAAW,QAAtB;;EAENT,kBAAU;IACT,IAAIM,KAAK,IAAIR,KAAb,EAAoB;MACnBY,uBAAaJ,KAAb;IACA;EACD,CAJD,EAIG,CAACR,KAAD,EAAQQ,KAAR,CAJH;;EAMA,SAASK,MAAT,CAAgBC,KAAhB,EAAuD;IAEtDA,KAAK,CAACC,cAAN;;IAEA,IAAI,CAACC,EAAL,EAAS;MACRJ;MACA;IACA;;IAED,IAAMK,IAAI,GAAG,IAAIC,QAAJ,CAAaJ,KAAK,CAACK,aAAnB,CAAb;;IAEA,IAAI,OAAOlB,SAAP,KAAqB,QAAzB,EAAmC;MAClC,KAAK,IAAMmB,IAAX,IAAmBnB,SAAnB,EAA8B;QAC7B,IAAIA,SAAS,CAACoB,cAAV,CAAyBD,IAAzB,CAAJ,EAAoC;UACnCH,IAAI,CAACK,MAAL,CAAYF,IAAZ,EAAkBnB,SAAS,CAACmB,IAAD,CAA3B;QACA;MACD;IACD;;IAGDhB,YAAY,CAAC,KAAD,CAAZ;IACAK,QAAQ,CAACF,SAAD,CAAR;IACAI,WAAW,CAACJ,SAAD,CAAX;IAEAD,aAAa,CAAC,IAAD,CAAb;IAEAiB,KAAK,CAAC,6BAA2BP,EAA5B,EAAkC;MACtCQ,MAAM,EAAE,MAD8B;MAEtCC,OAAO,EAAE;QAAEC,MAAM,EAAE;MAAV,CAF6B;MAGtCC,IAAI,EAAEV;IAHgC,CAAlC,CAAL,CAKEW,IALF,CAKO,eAAG;MAAI,UAAG,CAACC,IAAJ;IAAU,CALxB,EAMED,IANF,CAMO,UAACE,GAAD,EAAuB;MAC5B,IAAIA,GAAG,CAACC,IAAJ,KAAa,GAAjB,EAAsB;QACrB3B,YAAY,CAAC,IAAD,CAAZ;QACAO,WAAW,CAACmB,GAAD,CAAX;MACA,CAHD,MAGO;QACNrB,QAAQ,CAACqB,GAAD,CAAR;MACA;IACD,CAbF,EAcEE,KAdF,CAcQ,eAAG;MACTvB,QAAQ,CAACwB,GAAD,CAAR;IACA,CAhBF,EAiBEC,OAjBF,CAiBU;MACR5B,aAAa,CAAC,KAAD,CAAb;IACA,CAnBF;EAoBA;;EAED,OAAO;IAAE6B,KAAK,EAAE;MAAE3B,KAAK,OAAP;MAASE,QAAQ,UAAjB;MAAmBL,UAAU,YAA7B;MAA+BF,SAAS;IAAxC,CAAT;IAAqDU,MAAM;EAA3D,CAAP;AACA;;AAEQuB","names":["useForm","props","_a","debug","extraData","react_1","submitted","setSubmitted","submitting","setSubmitting","undefined","error","setError","response","setResponse","handler_1","submit","event","preventDefault","id","data","FormData","currentTarget","item","hasOwnProperty","append","fetch","method","headers","Accept","body","then","json","res","code","catch","err","finally","state","exports"],"sources":["F:\\university\\Websites\\Code alpha\\SocialCrypto-main\\SocialCrypto-Indexpage\\node_modules\\@formcarry\\react\\src\\useForm.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Props, FormcarryResponse } from './lib/types'\nimport { errorHandler, noIdHandler } from './lib/handler'\n\nfunction useForm(props: Props) {\n\tconst { id, debug = true, extraData } = props\n\tconst [submitted, setSubmitted] = useState<boolean>(false)\n\tconst [submitting, setSubmitting] = useState<boolean>(false)\n\tconst [error, setError] = useState(undefined)\n\tconst [response, setResponse] = useState<FormcarryResponse>()\n\n\tuseEffect(() => {\n\t\tif (error && debug) {\n\t\t\terrorHandler(error)\n\t\t}\n\t}, [debug, error])\n\n\tfunction submit(event: React.FormEvent<HTMLFormElement>) {\n\t\t// prevent redirection\n\t\tevent.preventDefault()\n\n\t\tif (!id) {\n\t\t\tnoIdHandler()\n\t\t\treturn\n\t\t}\n\n\t\tconst data = new FormData(event.currentTarget)\n\n\t\tif (typeof extraData === 'object') {\n\t\t\tfor (const item in extraData) {\n\t\t\t\tif (extraData.hasOwnProperty(item)) {\n\t\t\t\t\tdata.append(item, extraData[item])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// reset states.\n\t\tsetSubmitted(false)\n\t\tsetError(undefined)\n\t\tsetResponse(undefined)\n\n\t\tsetSubmitting(true)\n\n\t\tfetch(`https://formcarry.com/s/${id}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { Accept: 'application/json' },\n\t\t\tbody: data,\n\t\t})\n\t\t\t.then(res => res.json())\n\t\t\t.then((res: FormcarryResponse) => {\n\t\t\t\tif (res.code === 200) {\n\t\t\t\t\tsetSubmitted(true)\n\t\t\t\t\tsetResponse(res)\n\t\t\t\t} else {\n\t\t\t\t\tsetError(res)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tsetError(err)\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetSubmitting(false)\n\t\t\t})\n\t}\n\n\treturn { state: { error, response, submitting, submitted }, submit }\n}\n\nexport { useForm }"]},"metadata":{},"sourceType":"script"}